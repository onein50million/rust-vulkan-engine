#version 450
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const int num_models = 100;

layout(binding = 0) uniform UniformBufferObject {
    mat4 model[num_models];
    mat4 view[num_models];
    mat4 proj[num_models];
} ubos;

layout(push_constant) uniform PushConstants{
    int uniform_index;
    int texture_index;
} pushConstant;

layout(binding = 2, rgba8) uniform image2D outImage;

struct Ray{
    vec3 origin;
    vec3 direction;
};

vec3 rayAt(Ray ray, float ratio){
    return ray.origin + ray.direction*ratio;
}
bool hit_sphere(vec3 center, float radius, Ray ray){

    vec3 origin_center = ray.origin - center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(origin_center, ray.direction);
    float c = dot(origin_center,origin_center) - radius*radius;
    float discriminant = b*b - 4*a*c;
    return discriminant > 0.0;

}

vec4 rayColor(Ray ray){
    vec3 unit_vector = normalize(ray.direction);
    if(hit_sphere(vec3(0.5,0.5,-1.0),1.0, ray)){
        return vec4(1.0,0.0,0.0,1.0);
    }

    return vec4(unit_vector.yyy,1.0);
}



void main()
{

    vec3 resolution = gl_NumWorkGroups*gl_WorkGroupSize;
    float aspect_ratio = resolution.x/resolution.y;
    vec4 out_color = vec4(0.0);

    vec3 origin = vec3(0.0);
    vec2 screen_ratio = gl_GlobalInvocationID.xy/resolution.xy;

    Ray cool_ray = Ray(origin, vec3(screen_ratio, 1.0));

    out_color = rayColor(cool_ray);


    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy),out_color);

}