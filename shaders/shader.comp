#version 450
layout(local_size_x = 8, local_size_y =8, local_size_z = 1) in;

const bool RAYTRACING_ENABLED = true;

const int NUM_RANDOM = 100;
const int TREE_DEPTH = 10;
const float base_voxel_size = 128;
const float SPECULARITY = 0.5;

const uint TYPE_SPHERE = 0;
const uint TYPE_BOX = 1;

const uint MAX_BOUNCES = 5;

const uint SAMPLE_WIDTH = 1;
const uint SAMPLE_COUNT = SAMPLE_WIDTH*SAMPLE_WIDTH;

const int EMPTY = 0;
const int CHILDREN = 1;
const int REFLECTIVE = 2;

struct Node{
    int node_type;
    int node_indices[8];
    int next_deeper_node;
    int next_same_node;
    int parent_node;
    int current_depth;
    int path[TREE_DEPTH];
};

layout(binding = 0, std140) uniform UniformBufferObject {
    vec4 random[NUM_RANDOM];
    int player_index;
    int value2;
    int value3;
    int value4;
    vec2 mouse_ratio;

} ubos;


layout(push_constant) uniform PushConstants{
    mat4 model;
    mat4 view;
    mat4 proj;
    int texture_index;
    float constant;
} pushConstant;

layout(binding = 3, std430) buffer NodeBuffer{
    Node nodes[];
}node_buffer;

layout(set = 0, binding = 2, rgba8) uniform image2D outImage;

struct Ray{
    vec3 origin;
    vec3 direction;
};

struct RayResult{
    vec3 color;
    vec3 position;
    vec3 normal;
    bool is_light;
    float light_power;
};

struct Hittable{
    uint type;
    mat4 data; //Might be a better way to do this
};

vec3 camera_location(vec3 position){
    mat4 ubo = inverse(pushConstant.view);
    return (ubo * vec4(position,1.0)).xyz;
}

vec3 rayAt(Ray ray, float ratio){
    return ray.origin + ray.direction*ratio;
}
float hit_sphere(vec3 center, float radius, Ray ray){
//    center = camera_location(center);

    //TODO: Learn vector algebra
    vec3 origin_center = ray.origin - center;
    float a = dot(ray.direction, ray.direction);
    float b = 2.0 * dot(origin_center, ray.direction);
    float c = dot(origin_center,origin_center) - radius*radius;
    float discriminant = b*b - 4*a*c;
    if(discriminant < 0){
        return -1.0;
    }else{
        return max(0.0,(-b - sqrt(discriminant) ) / (2.0*a));
    }
}

//float hit_box(vec3 position, float size, Ray ray) {
//    float tmin = -1.0/0.0;
//    float tmax = 1.0/0.0;
//
//    for(int axis = 0; axis < 3; axis++){
//        float invD = 1.0/ray.direction[axis];
//        float t0 = (position[axis] - ray.origin[axis]) * invD;
//        float t1 = (position[axis] + size - ray.origin[axis]) * invD;
//        if(invD < 0.0){
//            float temp = t0;
//            t0 = t1;
//            t1 = temp;
//        }
//        tmin = max(min(t0,t1), tmin);
//        tmax = min(max(t0,t1), tmax);
//
//        if (tmax <= tmin){
//            return -1.0;
//        }
//
//    }
//    return min(tmin,tmax);
//}

float hit_box(vec3 position, float size, Ray ray, vec3 inverse_ray_direction) {
    vec3 p0 = position;
    vec3 p1 = position + size;

    vec3 tLower = (p0 - ray.origin) * inverse_ray_direction;
    vec3 tUpper = (p1 - ray.origin) * inverse_ray_direction;

    vec3 tMins = min(tLower,tUpper);
    vec3 tMaxes = max(tLower,tUpper);

    float tBoxMin = max(max(tMins.x,tMins.y),tMins.z);
    float tBoxMax = min(min(tMaxes.x,tMaxes.y),tMaxes.z);



    tBoxMin = max(tBoxMin, 0.001);  //helps when ray origin is inside box

    if(tBoxMax < tBoxMin){
        return -1.0;
    }
    return min(tBoxMin, tBoxMax);

}


vec3 sphere_normals(vec3 center, vec3 hit_position) {
    return normalize(hit_position - center);
}

vec3 box_normals(vec3 position, float size, vec3 hit_position) {
    vec3 relative_position = (hit_position - ( size*0.5 + position))*2.0 / size;
    vec3 clipped = step(0.99999, abs(relative_position));

    vec3 out_normal = clipped;
    return sign(relative_position)*out_normal;
}




float hit(Ray ray, Hittable hittable){
    return mix(hit_sphere((hittable.data[1].xyz),hittable.data[0].x, ray),hit_box(hittable.data[1].xyz, hittable.data[0].x, ray, 1.0/ray.direction),hittable.type);
}

vec3 get_normals(vec3 position, Hittable hittable){
    return mix(sphere_normals(hittable.data[1].xyz, position),box_normals(hittable.data[1].xyz, hittable.data[0].x, position),hittable.type);

}

vec3 get_node_position(int node_index){
    vec3 out_position = vec3(0.0, -base_voxel_size, 0.0);
    for (int i = 0; i <= node_buffer.nodes[node_index].current_depth; i++){
        int branch = node_buffer.nodes[node_index].path[i];
        float voxel_step_size =  0.5 * base_voxel_size*pow(0.5, i);
        out_position += vec3(
        ((branch % 2)) * voxel_step_size,
        (branch/4) * voxel_step_size,
        ((branch/2) % 2) * voxel_step_size
        );
    }
    return out_position;
}


RayResult castRay(Ray ray){

    const Hittable hittables[] = Hittable[](
    Hittable(TYPE_SPHERE,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    -5.0, 0.0, -5.0, 0.0,
    1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_SPHERE,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    5.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_SPHERE,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 50.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_SPHERE,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    5.0, 5.0, 5.0, 0.0,
    1.0, 0.7, 0.3, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_BOX,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    5.0, 3.0, 5.0, 0.0,
    1.0, 1.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_BOX,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    4.0, 3.0, 5.0, 0.0,
    1.0, 1.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_BOX,
    mat4(
    1.0, 0.0, 0.0, 0.0,
    5.0, 3.0, 6.0, 0.0,
    1.0, 1.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    ),
    Hittable(TYPE_SPHERE,
    mat4(
    0.3, 0.0, 0.0, 0.0,
    6.5,5.0, 7.5, 0.0,
    1.0, 1.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0
    )
    )
    );

    float closest_distance = 1.0/0.0; //infinity
    RayResult result;
    bool found = false;
    for(int i = 0; i < hittables.length(); i++){
        float hit_result = hit(ray, hittables[i]);
        if (hit_result > 0.0 && hit_result < closest_distance){
            closest_distance = hit_result;
            found = true;
            vec3 normal = get_normals(rayAt(ray,hit_result),hittables[i]);
            result = RayResult(hittables[i].data[2].xyz,rayAt(ray,hit_result),normal,false, 0.0);
        }
    }

    int current_node_index = 0;
    float hit_result = hit_box(get_node_position(current_node_index), base_voxel_size, ray, 1.0/ray.direction);
    if(hit_result > 0.0){
        while(true){
//            bool skip = ubos.random[0].x > 0.5;
            bool skip = false;

            for(int branch = 0; branch < 8; branch++){
                if(node_buffer.nodes[current_node_index].node_indices[branch] != 0){
                    int branch_node_index = node_buffer.nodes[current_node_index].node_indices[branch];
                    vec3 branch_position = get_node_position(branch_node_index);
                    float voxel_size = base_voxel_size*pow(0.5, node_buffer.nodes[branch_node_index].current_depth);
                    float branch_hit_result = hit_box(branch_position, voxel_size, ray, 1.0/ray.direction);
                    if(branch_hit_result > 0.0){
                        if (node_buffer.nodes[branch_node_index].node_type == CHILDREN){
                            skip = false;
                        } else if (node_buffer.nodes[branch_node_index].node_type == REFLECTIVE){
                            if (branch_hit_result < closest_distance){
                                closest_distance = branch_hit_result;
                                found = true;
                                vec3 normal = box_normals(branch_position, voxel_size, rayAt(ray, branch_hit_result));
                                result = RayResult(vec3(0.7,0.1,0.7), rayAt(ray, branch_hit_result), normal, false, 0.0);
                            }
                        }
//                        else if (node_buffer.nodes[branch_node_index].node_type == EMPTY){
//                            if (branch_hit_result < closest_distance){
//                                closest_distance = branch_hit_result;
//                                found = true;
//                                vec3 normal = box_normals(branch_position, voxel_size, rayAt(ray, branch_hit_result));
//                                result = RayResult(vec3(0.7, 0.1, 0.1), rayAt(ray, branch_hit_result), normal, false, 0.0);
//                            }
//                        }

                    }
                }
            }
            if(skip && node_buffer.nodes[current_node_index].next_same_node != 0){
                current_node_index = node_buffer.nodes[current_node_index].next_same_node;
            }
            else if(skip && node_buffer.nodes[current_node_index].next_same_node == 0){
                break;
            }
            else if(node_buffer.nodes[current_node_index].next_deeper_node != 0){
                current_node_index = node_buffer.nodes[current_node_index].next_deeper_node;
            }else{
                break;
            }
        }
    }

    if(found){
        return result;
    }
    vec3 sun_position = normalize(vec3(0.0,-0.2,1.0));
    float sun_radius = 0.1;
    float distance_to_sun = distance(normalize(ray.direction), (sun_position));
    vec3 sky_color = mix(vec3(0.26, 0.42, 0.70), vec3(0.02, 0.04, 0.07), distance_to_sun*0.5);
    vec3 sun_color = vec3(0.97, 0.80, 0.59);
    float sky_light_power = 10.0;
    float sun_light_power = 100.0;

    float lerp_ratio = min(1.0,pow(sun_radius / distance_to_sun,10));

    return RayResult(
    mix(sky_color,sun_color,lerp_ratio),
    vec3(0.0),
    vec3(0.0),
    true,
    mix(sky_light_power, sun_light_power, lerp_ratio));

}


void main()
{

    if(!RAYTRACING_ENABLED){
        imageStore(outImage, ivec2(gl_GlobalInvocationID.xy),vec4(0.0));
        return;
    }

    vec3 resolution = gl_NumWorkGroups * gl_WorkGroupSize;
//    vec3 resolution = vec3(800,600,1);
    float aspect_ratio = resolution.x/resolution.y;
    vec4 out_color = vec4(0.0);

    float focal_length = 1.0;


    float viewport_height = 2.0;
    vec2 viewport_size = vec2(viewport_height * aspect_ratio, viewport_height);

    vec3 horizontal = (vec3(viewport_size.x,0.0,0.0));
    vec3 vertical = (vec3(0.0,viewport_size.y,0.0));
    vec3 origin = (vec3(0.0,0.0,0.0));
    vec3 upper_left_corner = (-horizontal/2.0 - vertical/2.0 - vec3(0.0,0.0,focal_length));

    float sample_size = 1.0/SAMPLE_COUNT;

    float exposure = 1.0;

    vec4 samples[SAMPLE_COUNT];

    for(int current_sample = 0; current_sample < SAMPLE_COUNT; current_sample++){
        vec2 sample_coord = vec2(current_sample % (SAMPLE_WIDTH), current_sample / (SAMPLE_WIDTH));
        vec2 offset = sample_size*sample_coord - sample_size;
        vec2 screen_ratio = (gl_GlobalInvocationID.xy + offset)/resolution.xy;

        origin = (camera_location(vec3(0.0)));
        vec3 target = (inverse(pushConstant.view) * vec4(upper_left_corner + screen_ratio.x * horizontal + screen_ratio.y * vertical,1.0)).xyz - origin;
//        vec3 target = vec3(0.0,0.0,1.0);
        samples[current_sample] = vec4(0.0,0.0,0.0,1.0);
        vec4 last_albedo = vec4(0.0,0.0,0.0,1.0);

        for(int i = 0; i<MAX_BOUNCES; i++){
            Ray ray = Ray(origin,target);
            RayResult ray_result = castRay(ray);

//            samples[current_sample] = vec4((ray_result.normal + 1.0)/2.0, 1.0);
            float power = ray_result.light_power * pow(1.0, i);
            if (ray_result.is_light){
                if(i <= 0){
                    samples[current_sample] = vec4(ray_result.color*power/exposure,1.0);
                }else{
//                    samples[current_sample] = vec4(( ray_result.color*power/exposure),1.0) * vec4(last_albedo.xyz * pow(0.5, i),1.0);
//                    vec3 reflective_color = (ray_result.color*power/exposure)*pow(0.5, i);
//                    vec3 diffuse_color = last_albedo.xyz * pow(0.5, i) * (ray_result.color*power/exposure);
//                    samples[current_sample] = vec4(mix(diffuse_color,reflective_color, SPECULARITY),1.0);
                    samples[current_sample] = vec4(last_albedo.xyz * pow(0.5, i) * (ray_result.color*power/exposure),1.0);
                }
                break;
            }
            last_albedo = vec4(ray_result.color,1.0);
            vec3 reflection = (ray.direction - 2*dot(ray.direction, ray_result.normal)*ray_result.normal);
            origin = ray_result.position + ray_result.normal * 0.1;
            vec3 random_vector = vec3(0.0);
            random_vector.x = (ubos.random[((gl_GlobalInvocationID.x * gl_GlobalInvocationID.y) + current_sample*56) % NUM_RANDOM].x - 0.5)*2.0;
            random_vector.y = (ubos.random[((gl_GlobalInvocationID.x * gl_GlobalInvocationID.y + 1) + current_sample*32) % NUM_RANDOM].x - 0.5)*2.0;
            random_vector.z = (ubos.random[((gl_GlobalInvocationID.x * gl_GlobalInvocationID.y + 2 ) + current_sample*123) % NUM_RANDOM].x - 0.5)*2.0;
            random_vector = random_vector;

            target = mix(random_vector, reflection, SPECULARITY);
        }

        float mouse_distance = min(1.0,distance(screen_ratio,ubos.mouse_ratio)*256.0);
        samples[current_sample].xyz = mix(1-samples[current_sample].xyz, samples[current_sample].xyz,mouse_distance);
    }


    vec4 sum = vec4(0.0);
    for(int i = 0; i < SAMPLE_COUNT; i++){
        sum += samples[i];
    }

    out_color = sum/SAMPLE_COUNT;

    imageStore(outImage, ivec2(gl_GlobalInvocationID.xy),out_color);

}